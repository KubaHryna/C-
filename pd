namespace Praca_Domowa
{
    public partial class Form1 : Form
    {

        string s = "";
        string napis = "Nie ma następnika";
        public Form1()
        {
            InitializeComponent();

        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void button1_Click(object sender, EventArgs e)
        {
            DrzewoBinarne d1 = new DrzewoBinarne(5);
            d1.Add(5);
            d1.Add(3);
            d1.Add(8);
            d1.Add(1);
            d1.Add(1);
            d1.Add(4);
            d1.Add(6);
            d1.Add(5);
            d1.Add(9);


        }

        private void DrzewoBin_AfterSelect(object sender, TreeViewEventArgs e)
        {

            DrzewoBinarne d1 = new DrzewoBinarne(5);
            d1.Add(5);
            d1.Add(3);
            d1.Add(8);
            d1.Add(1);
            d1.Add(1);
            d1.Add(4);
            d1.Add(6);
            d1.Add(5);
            d1.Add(9);




        }


        public class Węzeł3
        {
            public int wartosc;
            public Węzeł3 rodzic;
            public Węzeł3 prawedziecko;
            public Węzeł3 lewedziecko;
            public Węzeł3(int liczba)
            {
                this.wartosc = liczba;
            }

            public override string ToString()
            {
                return this.wartosc.ToString();
            }

            public void Add2(int liczba)
            {
                var dziecko = new Węzeł3(liczba);
                dziecko.rodzic = this;
                if (liczba < this.wartosc)
                {
                    this.lewedziecko = dziecko;
                }
                else
                {
                    this.prawedziecko = dziecko;
                }

            }
        }
        public class DrzewoBinarne
        {
            public Węzeł3 korzen;
            public int liczba_wezłow;
            public DrzewoBinarne(int liczba)
            {
                this.korzen = new(liczba);
                this.liczba_wezłow = 1;

            }

            public void Add(int liczba)
            {
                if (korzen == null)
                {
                    korzen = new Węzeł3(liczba);
                    return;
                }
                Węzeł3 current = korzen;
                if (liczba < current.wartosc)
                {
                    if (current.lewedziecko == null)
                    {
                        current.lewedziecko = new Węzeł3(liczba);
                        current.lewedziecko.rodzic = current;

                        liczba_wezłow++;

                    }
                    else
                    {
                        current = current.lewedziecko;

                    }


                }
                else if (liczba >= current.wartosc)
                {
                    if (current.prawedziecko == null)
                    {
                        current.prawedziecko = new Węzeł3(liczba);
                        current.prawedziecko.rodzic = current;
                        liczba_wezłow++;
                        return;
                    }
                    else
                    {
                        current = current.prawedziecko;
                    }



                }
                else
                {
                    return;
                }

            }

            public void Add2(int liczba)
            {
                Węzeł3 rodzic = this.ZnajdzRodzica(liczba);
                rodzic.Add2(liczba);

            }
            public Węzeł3 ZnajdzRodzica(int liczba)
            {
                var w = this.korzen;
                while (true)
                {
                    if (liczba < w.wartosc)
                    {
                        if (w.lewedziecko == null)
                        {
                            return w;
                        }
                        else
                        {
                            w = w.lewedziecko;
                        }
                    }
                    else if (liczba > w.wartosc)
                    {
                        if (w.prawedziecko == null)
                        {
                            return w;
                        }
                        else
                        {
                            w = w.prawedziecko;
                        }
                    }



                }


            }
            public int Znajdz(int liczba)
            {
                var w = this.korzen;
                while (true)
                {
                    if (liczba < w.wartosc)
                    {
                        if (liczba == w.lewedziecko.wartosc)
                        {
                            return w.lewedziecko.wartosc;
                        }
                        else
                        {
                            w = w.lewedziecko;
                        }

                    }
                    else if (liczba > w.wartosc)
                    {
                        if (liczba == w.prawedziecko.wartosc)
                        {
                            return w.prawedziecko.wartosc;
                        }
                        else
                        {
                            w = w.prawedziecko;
                        }
                    }
                    else
                    {
                        if (liczba == w.wartosc)
                        {
                            return w.wartosc;
                        }
                    }


                }
            }
            public Węzeł3 znajdzmin(Węzeł3 w)
            {
                while (true)
                {
                    if (w.lewedziecko == null)
                    {
                        return w;
                    }
                    else
                    {
                        w = w.lewedziecko;
                    }
                }

            }

            public Węzeł3 znajdzmax(Węzeł3 w)
            {

                while (true)
                {
                    if (w.prawedziecko == null)
                    {
                        return w;
                    }
                    else
                    {
                        w = w.prawedziecko;
                    }
                }
            }

            public Węzeł3 następnik(Węzeł3 w)
            {
                if (w.prawedziecko != null)
                {
                    znajdzmin(w.prawedziecko);
                }
                else if (w.lewedziecko == null)
                {
                    w = w.rodzic;
                }
                else
                {
                    return napis;
                }


            }
            public Węzeł3 poprzednik(Węzeł3 w)
            {
                if (w.rodzic != null)
                {
                    return w.rodzic;
                }

            }

        }
    }
}
// 1)Węzeł 3 Znajdź(int liczba) ma znalezc liczbe ktora chcemy znalezc
// 2)Węzeł3 ZnajdźMin(Węzeł3 w) ma znalezc najmniejsza liczbe w drzewie (na maxa w lewo)
// 3)Węzeł3 ZnajdźMax(Węzeł3 w) ma znalezc najwieksza liczbe w drzewie (na maxa w prawo)
// 4)Węzeł3 Następnik(Węzeł3 w)
//    a)jesli jest prawe dziecko to uzyj ZnajdzMin(w.prawedziecko)
//    b)jesli nie ma prawego dziecko to idz do gory, aż wyjdziesz jako lewe dziecko rodzica, następnik to rodzic
//    c)jezeli nie ma prawego dziecka, i idac do gory nie ma (2), to nie ma nastepnika
//5)Węzeł Poprzednik(Węzeł3 w)
